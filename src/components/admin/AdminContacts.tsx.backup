import React, { useState, useEffect } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Eye, Mail, Phone, User, Calendar, Trash2 } from 'lucide-react';
import { contactsService, type ContactRequest } from '@/lib/firebaseServices';
import { useToast } from '@/hooks/use-toast';
import { format } from 'date-fns';

const AdminContacts = () => {
  const [contacts, setContacts] = useState<ContactRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedContact, setSelectedContact] = useState<ContactRequest | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const unsubscribe = contactsService.onSnapshot((contactList) => {
      setContacts(contactList);
      setLoading(false);
    });

    return unsubscribe;
  }, []);

  const handleMarkAsRead = async (id: string) => {
    try {
      await contactsService.update(id, { status: 'read' });
      toast({
        title: 'Contact marked as read',
        description: 'Contact request has been marked as read',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to update contact status',
        variant: 'destructive',
      });
    }
  };

  const handleMarkAsResponded = async (id: string) => {
    try {
      await contactsService.update(id, { status: 'responded' });
      toast({
        title: 'Contact marked as responded',
        description: 'Contact request has been marked as responded',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to update contact status',
        variant: 'destructive',
      });
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await contactsService.delete(id);
      toast({
        title: 'Contact deleted',
        description: 'Contact request has been deleted successfully',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to delete contact request',
        variant: 'destructive',
      });
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'new':
        return <Badge variant="default" className="bg-green-600">New</Badge>;
      case 'read':
        return <Badge variant="secondary">Read</Badge>;
      case 'responded':
        return <Badge variant="outline">Responded</Badge>;
      default:
        return <Badge variant="default">Unknown</Badge>;
    }
  };

  if (loading) {
    return <div className="text-center py-8">Loading contacts...</div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Contact Requests</h2>
        <div className="text-sm text-gray-500">
          Total: {contacts.length} | New: {contacts.filter(c => c.status === 'new').length}
        </div>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Phone</TableHead>
            <TableHead>Date</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {contacts.map((contact) => (
            <TableRow key={contact.id}>
              <TableCell className="font-medium">{contact.name}</TableCell>
              <TableCell>{contact.email}</TableCell>
              <TableCell>{contact.phone}</TableCell>
              <TableCell>
                {contact.createdAt ? format(contact.createdAt.toDate(), 'MMM dd, yyyy') : 'N/A'}
              </TableCell>
              <TableCell>{getStatusBadge(contact.status)}</TableCell>
              <TableCell>
                <div className="flex items-center gap-2">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSelectedContact(contact);
                          if (contact.status === 'new') {
                            handleMarkAsRead(contact.id!);
                          }
                        }}
                      >
                        <Eye size={14} />
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>Contact Request Details</DialogTitle>
                      </DialogHeader>
                      {selectedContact && (
                        <Card>
                          <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                              <User size={20} />
                              {selectedContact.name}
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="flex items-center gap-2">
                                <Mail size={16} className="text-gray-500" />
                                <span>{selectedContact.email}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <Phone size={16} className="text-gray-500" />
                                <span>{selectedContact.phone}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <Calendar size={16} className="text-gray-500" />
                                <span>
                                  {selectedContact.createdAt 
                                    ? format(selectedContact.createdAt.toDate(), 'MMM dd, yyyy HH:mm')
                                    : 'N/A'
                                  }
                                </span>
                              </div>
                              <div className="flex items-center gap-2">
                                Status: {getStatusBadge(selectedContact.status)}
                              </div>
                            </div>
                            
                            <div>
                              <h4 className="font-medium mb-2">Message:</h4>
                              <p className="bg-gray-100 p-3 rounded text-sm">
                                {selectedContact.message}
                              </p>
                            </div>

                            <div className="flex gap-2 pt-4">
                              {selectedContact.status !== 'responded' && (
                                <Button 
                                  onClick={() => handleMarkAsResponded(selectedContact.id!)}
                                  className="flex items-center gap-2"
                                >
                                  Mark as Responded
                                </Button>
                              )}
                              <Button 
                                variant="outline"
                                onClick={() => window.open(`mailto:${selectedContact.email}`)}
                              >
                                Reply via Email
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      )}
                    </DialogContent>
                  </Dialog>

                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={() => handleDelete(contact.id!)}
                  >
                    <Trash2 size={14} />
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {contacts.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No contact requests found.
        </div>
      )}
    </div>
  );
};

export default AdminContacts;
